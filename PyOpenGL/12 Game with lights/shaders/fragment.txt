#version 330 core

in vec2 TexCoord;
in vec3 fragPos;
in vec3 fragNormal;

out vec4 Colour;

struct PointLight{
	bool isOn;

	vec3 position;

	float constant;
	float linear;
	float quadratic;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct Material {
    vec3 ambient;
    sampler2D diffuse;
    vec3 specular;
    float shininess;
}; 

#define MAX_POINT_LIGHTS 8
uniform PointLight pointLights[MAX_POINT_LIGHTS];

uniform Material material;

uniform vec3 viewPos;

vec3 CalculatePointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);

void main()
{
	vec3 viewDir = normalize(viewPos - fragPos);
	vec3 lightOutput = vec3(0.0);

	for(int i = 0; i < MAX_POINT_LIGHTS; i++){
		if(pointLights[i].isOn){
			lightOutput += CalculatePointLight(pointLights[i], fragNormal, fragPos, viewDir);
		}
	}

	Colour = vec4(lightOutput, 1.0);
}

vec3 CalculatePointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // attenuation
    float distance    = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + 
  			     light.quadratic * (distance * distance));    
    // combine results
    vec3 ambient  = light.ambient  * vec3(texture(material.diffuse, TexCoord));
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(material.diffuse, TexCoord));
    vec3 specular = light.specular * spec;
    diffuse  *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
}